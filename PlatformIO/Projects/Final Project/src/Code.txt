#include <Arduino.h>
#include <Wire.h>

// Define vibration motor pins
const int vibrator1 = 23; // Left
const int vibrator2 = 19; // Right
const int vibrator3 = 18; // Front
const int vibrator4 = 5; // Back

const int ledPin = 6;

const int sda = 21; //Data Pin
const int scl = 22; //Clock Pin

const char* dance_moves[][6] = {
  {"L", "L", "R", "F", "B", ""},
  {"L", "L", "R", "R", "F", "B"}
};

const int num_moves = 2; // Number of dance sequences


// IMU
byte ACCEL_XOUT_H = 0;
byte ACCEL_XOUT_L = 0;
int16_t ACCEL_XOUT_RAW = 0;
float gX;

byte ACCEL_YOUT_H = 0;
byte ACCEL_YOUT_L = 0;
int16_t ACCEL_YOUT_RAW = 0;
float gY;

byte ACCEL_ZOUT_H = 0;
byte ACCEL_ZOUT_L = 0;
int16_t ACCEL_ZOUT_RAW = 0;
float gZ;

// Gyro
byte GYRO_XOUT_H = 0;
byte GYRO_XOUT_L = 0;
int16_t GYRO_XOUT_RAW = 0;
float gyroX;

byte GYRO_YOUT_H = 0;
byte GYRO_YOUT_L = 0;
int16_t GYRO_YOUT_RAW = 0;
float gyroY;

byte GYRO_ZOUT_H = 0;
byte GYRO_ZOUT_L = 0;
int16_t GYRO_ZOUT_RAW = 0;
float gyroZ;

int address = 0x68;


void setup() {
  Wire.begin(sda, scl);

  // Initialize vibration motors and LEDs
  pinMode(vibrator1, OUTPUT);
  pinMode(vibrator2, OUTPUT);
  pinMode(vibrator3, OUTPUT);
  pinMode(vibrator4, OUTPUT);

  pinMode(ledPin, OUTPUT);

  // Start serial communication for debugging
  Serial.begin(9600);
}

// Function to stop all motors
void stopAllMotors() {
  analogWrite(vibrator1, 0);
  analogWrite(vibrator2, 0);
  analogWrite(vibrator3, 0);
  analogWrite(vibrator4, 0);
}

// Function to activate the correct motor based on the move
void activateMotor(char move) {
  switch (move) {
    case 'L':
      analogWrite(vibrator1, 10000);
      Serial.println("Left");
      break;
    case 'R':
      analogWrite(vibrator2, 10000);
      Serial.println("Right");
      break;
    case 'F':
      analogWrite(vibrator3, 10000);
      Serial.println("Front");
      break;
    case 'B':
      analogWrite(vibrator4, 10000);
      Serial.println("Back");
      break;
  }
}

void readAccelerometerData(){
  // Read all accelerometer data in one transmission
  Wire.beginTransmission(address);
  Wire.write(0x3B);  // Start with accelerometer X-axis register address
  Wire.endTransmission();

  Wire.requestFrom(address, 6);  // Read 6 bytes for all axes

  ACCEL_XOUT_H = Wire.read();
  ACCEL_XOUT_L = Wire.read();
  ACCEL_YOUT_H = Wire.read();
  ACCEL_YOUT_L = Wire.read();
  ACCEL_ZOUT_H = Wire.read();
  ACCEL_ZOUT_L = Wire.read();
  
  ACCEL_XOUT_RAW = (ACCEL_XOUT_H << 8) | ACCEL_XOUT_L;
  gX = ACCEL_XOUT_RAW / 16384.0;  // Assuming 16384 LSB/g for accelerometer

  ACCEL_YOUT_RAW = (ACCEL_YOUT_H << 8) | ACCEL_YOUT_L;
  gY = ACCEL_YOUT_RAW / 16384.0;

  ACCEL_ZOUT_RAW = (ACCEL_ZOUT_H << 8) | ACCEL_ZOUT_L;
  gZ = ACCEL_ZOUT_RAW / 16384.0;

  // Gyro
  Wire.beginTransmission(address);
  Wire.write(0x43);  // Start with accelerometer X-axis register address
  Wire.endTransmission();

  Wire.requestFrom(address, 6);  // Read 6 bytes for all axes

  GYRO_XOUT_H = Wire.read();
  GYRO_XOUT_L = Wire.read();
  GYRO_YOUT_H = Wire.read();
  GYRO_YOUT_L = Wire.read();
  GYRO_ZOUT_H = Wire.read();
  GYRO_ZOUT_L = Wire.read();
  
  GYRO_XOUT_RAW = (GYRO_XOUT_H << 8) | GYRO_XOUT_L;
  gyroX = GYRO_XOUT_RAW / 16384.0;  // Assuming 16384 LSB/g for accelerometer

  GYRO_YOUT_RAW = (GYRO_YOUT_H << 8) | GYRO_YOUT_L;
  gyroY = GYRO_YOUT_RAW / 16384.0;

  GYRO_ZOUT_RAW = (GYRO_ZOUT_H << 8) | GYRO_ZOUT_L;
  gyroZ = GYRO_ZOUT_RAW / 16384.0;

  delay(10);
}

// Function to check if the user performed the correct movement
bool checkMovement(char move) {
  readAccelerometerData();  // Get the latest IMU readings

  // Adjust threshold values based on testing
  int threshold = 0;

  switch (move) {
    case 'L':
      return gX < -threshold;  // Left movement
    case 'R':
      return gX > threshold;   // Right movement
    case 'F':
      return gY > threshold;   // Forward movement
    case 'B':
      return gY < -threshold;  // Backward movement
  }
  return false;  // Default to false if no valid move is detected
}

void loop() {
  analogWrite(ledPin, 255);
  delay(20);
  analogWrite(ledPin, 50);
  delay(20);
  Serial.println("Hee");

  // for (int dance_move_index = 0; dance_move_index < num_moves; dance_move_index++) {
  //   Serial.print("Playing Dance Sequence ");
  //   Serial.println(dance_move_index + 1);

  //   for (int i = 0; dance_moves[dance_move_index][i][0] != '\0'; i++) {
  //     char move = dance_moves[dance_move_index][i][0];
      
  //     activateMotor(move);

  //     while (!checkMovement(move)) {
  //       Serial.println("Incorrect movement!");
  //       digitalWrite(redLED, HIGH);
  //       delay(500);
  //       digitalWrite(redLED, LOW);
  //     }

  //     Serial.println("Correct movement!");
  //     digitalWrite(greenLED, HIGH);
  //     delay(300);
  //     digitalWrite(greenLED, LOW);

  //     stopAllMotors();
  //     delay(500);
  //   }
  //   delay(1000);  // Optional delay between dance sequences
  // }
}