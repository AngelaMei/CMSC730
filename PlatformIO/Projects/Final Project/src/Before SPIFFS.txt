#include <Arduino.h>
#include "WiFi.h"
#include <Wire.h>

#include <SPIFFS.h>

const int LED_PIN1 = 19;
const int LED_PIN2 = 22;
const int LED_PIN3 = 21;

// IMU
const int sda = 21; //Data Pin
const int scl = 22; //Clock Pin
int address = 0x68;
float AccelSensitiveScale = 2048.0; //+-2G
float GyroSensitiveScale = 131.0;
unsigned long previousTime = 0;

// Cali
float caliX = 329.56;
float caliY = 1257.35;
float caliZ = 538.38;

struct IMUData {
  byte high;
  byte low;
  float g;
  float perS;
  float angle;
  int16_t raw;
};

IMUData accelX, accelY, accelZ;
IMUData gyroX, gyroY, gyroZ;

// WiFi
const char* ssid = "Streambank5988";
const char* password = "5305Howard";
WiFiServer server(80);

void readIMUData() {
  Wire.beginTransmission(address);
  Wire.write(0x3B);
  Wire.endTransmission();

  Wire.requestFrom(address, 6);

  accelX.high = Wire.read();
  accelX.low = Wire.read();
  accelY.high = Wire.read();
  accelY.low = Wire.read();
  accelZ.high = Wire.read();
  accelZ.low = Wire.read();
  
  // Calculate g-forces for accelerometer
  accelX.g = static_cast<int16_t>((accelX.high << 8) | accelX.low) / AccelSensitiveScale;
  accelY.g = static_cast<int16_t>((accelY.high << 8) | accelY.low) / AccelSensitiveScale;
  accelZ.g = static_cast<int16_t>((accelZ.high << 8) | accelZ.low) / AccelSensitiveScale;

  Serial.print(">accelX:");
  Serial.println(accelX.g);
  Serial.print(">accelY:");
  Serial.println(accelY.g);
  Serial.print(">accelZ:");
  Serial.println(accelZ.g);
  delay(10);

  // Gyro
  Wire.beginTransmission(address);
  Wire.write(0x43);  // Start with accelerometer X-axis register address
  Wire.endTransmission();

  Wire.requestFrom(address, 6);  // Read 6 bytes for all axes

  gyroX.high = Wire.read();
  gyroX.low = Wire.read();
  gyroY.high = Wire.read();
  gyroY.low = Wire.read();
  gyroZ.high = Wire.read();
  gyroZ.low = Wire.read();
  
  // Calculate angular velocities for gyro (modify if needed)
  gyroX.raw = static_cast<int16_t>((gyroX.high << 8) | gyroX.low);
  gyroY.raw = static_cast<int16_t>((gyroY.high << 8) | gyroY.low);
  gyroZ.raw = static_cast<int16_t>((gyroZ.high << 8) | gyroZ.low);

  gyroX.perS = (gyroX.raw - caliX) / GyroSensitiveScale;
  gyroY.perS = (gyroY.raw - caliY) / GyroSensitiveScale;
  gyroZ.perS = (gyroZ.raw - caliZ) / GyroSensitiveScale;

  unsigned long currentTime = millis();
  float elapsedTime = (currentTime - previousTime) / 1000.0f;

  gyroX.angle += gyroX.perS * elapsedTime;
  gyroY.angle += gyroY.perS * elapsedTime;
  gyroZ.angle += gyroZ.perS * elapsedTime;
  
  previousTime = currentTime;

  // Serial.print(">gyroAngleX:");
  // Serial.println(gyroX.angle);
  // Serial.print(">gyroAngleY:");
  // Serial.println(gyroY.angle);
  // Serial.print(">gyroAngleZ:");
  // Serial.println(gyroZ.angle);
  delay(10);
}

void setup() {
  //IMU
  Wire.begin(sda, scl);
  Wire.beginTransmission(address);
  Wire.write(0x1C);
  Wire.write(0b00011000);
  Wire.endTransmission();

  Serial.begin(115200);
  pinMode(LED_PIN1, OUTPUT);
  pinMode(LED_PIN2, OUTPUT);
  pinMode(LED_PIN3, OUTPUT);
  delay(10);

  // test
  digitalWrite(LED_PIN1, HIGH);
  delay(500);
  digitalWrite(LED_PIN1, LOW);
  digitalWrite(LED_PIN2, HIGH);
  delay(500);
  digitalWrite(LED_PIN2, LOW);
  digitalWrite(LED_PIN3, HIGH);
  delay(500);
  digitalWrite(LED_PIN3, LOW);

  WiFi.begin(ssid, password);
  Serial.println("Connect to ");
  Serial.println(ssid);
  
  while (WiFi.status() != WL_CONNECTED){
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected, IP:");
  Serial.println(WiFi.localIP());
  server.begin();

  //SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("An error occurred while mounting SPIFFS");
    return;
  }
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println("New client connected!");
    String request = "";
    bool isRequestComplete = false;

    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        Serial.write(c);
        request += c;

        // HTTP Request 結束條件
        if (request.endsWith("\r\n\r\n")) {
          isRequestComplete = true;
          break;
        }
      }
    }

    if (isRequestComplete) {
      Serial.println("HTTP Request received:");
      Serial.println(request);

      // 判斷請求內容
      if (request.indexOf("GET /H") >= 0) {
        Serial.println("Turning LED ON");
        digitalWrite(LED_PIN1, HIGH);
        Serial.println(request);
      } else if (request.indexOf("GET /L") >= 0) {
        Serial.println("Turning LED OFF");
        digitalWrite(LED_PIN1, LOW);
        Serial.println(request);
      } else if (request.indexOf("GET /favicon.ico") >= 0) {
        Serial.println("Ignoring favicon request.");
      }

      if (request.indexOf("GET /data") >= 0) {
        // Serve gyro data as plain text
        readIMUData();
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/plain");
        client.println();
        client.print(gyroZ.angle);
      } else if (request.indexOf("GET /") >= 0) {
        // Serve the main HTML page
        client.println("HTTP/1.1 200 OK");
        client.println("Content-type:text/html");
        client.println();
        client.println("<!DOCTYPE html>");
        client.println("<html>");
        client.println("<head>");
        client.println("<title>ESP32 IMU Data</title>");
        client.println("<script>");
        client.println("function updateData() {");
        client.println("  fetch('/data')"); // Fetch the gyro data
        client.println("    .then(response => response.text())");
        client.println("    .then(data => {");
        client.println("      document.getElementById('gyroZAngle').innerText = data;");
        client.println("    });");
        client.println("}");
        client.println("setInterval(updateData, 1000);"); // Update every second
        client.println("</script>");
        client.println("</head>");
        client.println("<body>");
        client.println("<h1>ESP32 IMU Data</h1>");
        client.println("<p>Click <a href=\"/H\">here</a> to turn the LED on pin 23 on.</p>");
        client.println("<p>Click <a href=\"/L\">here</a> to turn the LED on pin 23 off.</p>");
        client.println("<h2>Gyroscope Z-Axis Angle:</h2>");
        client.println("<p id=\"gyroZAngle\">Loading...</p>");
        client.println("</body>");
        client.println("</html>");
      }
    }
    client.stop();
    Serial.println("Client disconnected.");
  }
}